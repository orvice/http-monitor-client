// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monitor.proto

/*
Package httpMonitor is a generated protocol buffer package.

It is generated from these files:
	monitor.proto

It has these top-level messages:
	Request
	Response
*/
package httpMonitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_None    ResultCode = 0
	ResultCode_Fail    ResultCode = 1
	ResultCode_Success ResultCode = 2
	ResultCode_Timeout ResultCode = 3
)

var ResultCode_name = map[int32]string{
	0: "None",
	1: "Fail",
	2: "Success",
	3: "Timeout",
}
var ResultCode_value = map[string]int32{
	"None":    0,
	"Fail":    1,
	"Success": 2,
	"Timeout": 3,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Request struct {
	Uri     string `protobuf:"bytes,1,opt,name=Uri" json:"Uri,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=Timeout" json:"Timeout,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Request) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Response struct {
	Result     ResultCode `protobuf:"varint,1,opt,name=Result,enum=httpMonitor.ResultCode" json:"Result,omitempty"`
	StatusCode int32      `protobuf:"varint,2,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetResult() ResultCode {
	if m != nil {
		return m.Result
	}
	return ResultCode_None
}

func (m *Response) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "httpMonitor.Request")
	proto.RegisterType((*Response)(nil), "httpMonitor.Response")
	proto.RegisterEnum("httpMonitor.ResultCode", ResultCode_name, ResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HttpMonitorSrv service

type HttpMonitorSrvClient interface {
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type httpMonitorSrvClient struct {
	cc *grpc.ClientConn
}

func NewHttpMonitorSrvClient(cc *grpc.ClientConn) HttpMonitorSrvClient {
	return &httpMonitorSrvClient{cc}
}

func (c *httpMonitorSrvClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/httpMonitor.HttpMonitorSrv/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HttpMonitorSrv service

type HttpMonitorSrvServer interface {
	Send(context.Context, *Request) (*Response, error)
}

func RegisterHttpMonitorSrvServer(s *grpc.Server, srv HttpMonitorSrvServer) {
	s.RegisterService(&_HttpMonitorSrv_serviceDesc, srv)
}

func _HttpMonitorSrv_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpMonitorSrvServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpMonitor.HttpMonitorSrv/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpMonitorSrvServer).Send(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpMonitorSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpMonitor.HttpMonitorSrv",
	HandlerType: (*HttpMonitorSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _HttpMonitorSrv_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitor.proto",
}

func init() { proto.RegisterFile("monitor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xc1, 0x4e, 0x02, 0x31,
	0x14, 0x64, 0x59, 0x64, 0xf1, 0x11, 0x49, 0xf3, 0xa2, 0x71, 0xe3, 0xc1, 0x90, 0x3d, 0x11, 0x0f,
	0x6b, 0x82, 0xe1, 0xe2, 0xd5, 0x44, 0xbd, 0xe8, 0xa1, 0xab, 0x27, 0x4f, 0x08, 0x2f, 0xb1, 0x09,
	0xf4, 0xad, 0xed, 0xab, 0xdf, 0x6f, 0x5a, 0x20, 0x90, 0xbd, 0xcd, 0x4c, 0x3b, 0x9d, 0x99, 0xc2,
	0xc5, 0x96, 0xad, 0x11, 0x76, 0x75, 0xeb, 0x58, 0x18, 0xc7, 0x3f, 0x22, 0xed, 0xdb, 0x4e, 0xaa,
	0x16, 0x50, 0x68, 0xfa, 0x0d, 0xe4, 0x05, 0x15, 0xe4, 0x9f, 0xce, 0x94, 0xd9, 0x34, 0x9b, 0x9d,
	0xeb, 0x08, 0xb1, 0x84, 0xe2, 0xc3, 0x6c, 0x89, 0x83, 0x94, 0xfd, 0x69, 0x36, 0xcb, 0xf5, 0x81,
	0x56, 0x5f, 0x30, 0xd2, 0xe4, 0x5b, 0xb6, 0x9e, 0xf0, 0x1e, 0x86, 0x9a, 0x7c, 0xd8, 0x48, 0xb2,
	0x4e, 0xe6, 0xd7, 0xf5, 0x49, 0x40, 0xbd, 0x3b, 0x7a, 0xe2, 0x35, 0xe9, 0xfd, 0x35, 0xbc, 0x05,
	0x68, 0x64, 0x29, 0xc1, 0x47, 0x35, 0xbd, 0x7c, 0xa6, 0x4f, 0x94, 0xbb, 0x47, 0x80, 0xa3, 0x0b,
	0x47, 0x30, 0x78, 0x67, 0x4b, 0xaa, 0x17, 0xd1, 0xf3, 0xd2, 0x6c, 0x54, 0x86, 0x63, 0x28, 0x9a,
	0xb0, 0x5a, 0x91, 0xf7, 0xaa, 0x1f, 0xc9, 0xbe, 0x96, 0xca, 0xe7, 0x2f, 0x30, 0x79, 0x3d, 0xa6,
	0x37, 0xee, 0x0f, 0x17, 0x30, 0x68, 0xc8, 0xae, 0xf1, 0xb2, 0x53, 0x2b, 0x8d, 0xbe, 0xb9, 0xea,
	0x96, 0x4d, 0x9b, 0xaa, 0xde, 0xf7, 0x30, 0x7d, 0xd6, 0xc3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x65, 0x06, 0xa6, 0x3d, 0x01, 0x00, 0x00,
}
